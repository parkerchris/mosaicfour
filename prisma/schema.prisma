datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  userType       String? //use this to differentiate investor vs property manager. Replace this with the tole type below
  role           Role            @default(owner)
  accounts       Account[]
  sessions       Session[]
  Properties     Property[]
  //propertyGroups PropertyGroup[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  address           String
  city              String
  state             String
  zip               String
  owner             User            @relation(fields: [ownerId], references: [id])
  ownerId           String          
  //owner             User[]                       
  //ownership         String?
  //occupied          Boolean?
  //value             Int?
  //rent              Int?
  //rentDuration      String?
  //propertyGroup     PropertyGroup?     @relation(fields: [propertyGroupId], references: [id])
  //propertyGroupId   String?            @unique
  insurancePolicies InsurancePolicy[]
  //tenants           Tenant[]
  propertyData      PropertyData?
}

model PropertyGroup {
  id         String     @id @default(cuid())
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt
  //properties Property[]
  //members    User[]
}

model PropertyData {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  property      Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String      @unique
  beds          String?      
  baths         String?
  yearBuilt     String?
  parcelNumber  String?
  sqft          String?
  value         String?
  purchasePrice String?
  purchaseDate  String?
  rent          String?
  rentDuration  String?
  mailboxNumber String?
  mailboxLocation String?
  garbageDay  String?
  landscapeDay  String?
}

model InsurancePolicy {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  property     Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId   String?   
  policyType   String?
  policyNumber String?
}

model Tenant {
  id         String    @id @default(cuid())
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  firstName  String
  lastName   String
  email      String
  moveIn     DateTime
  //property   Property? @relation(fields: [propertyId], references: [id])
  //propertyId String?   @unique
}

enum Role {
  owner
  manager
}

enum RentDuration {
  night
  month
}